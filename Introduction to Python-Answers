Introduction to Python
Python Basics

What is Python?
Python is a high-level, interpreted programming language known for its readability and simplicity. It supports multiple programming paradigms, including procedural, object-oriented, and functional programming.

Key Features:

    Readability: Python's syntax is clean and easy to understand.
    Versatile: Suitable for web development, data analysis, artificial intelligence, scientific computing, and more.
    Large Standard Library: A comprehensive library that simplifies complex tasks.
    Cross-Platform: Works on various operating systems (Windows, macOS, Linux).
    Community Support: A vast community that contributes to a rich ecosystem of libraries and frameworks.

Use Cases:

    Web Development: Using frameworks like Django and Flask.
    Data Science: Libraries such as Pandas, NumPy, and Matplotlib.
    Automation: Scripting for automating repetitive tasks.
    Machine Learning: Libraries like TensorFlow and scikit-learn.

Installing Python

Steps to Install Python:
For Windows:

    Download: Visit the official Python website and download the installer.
    Run Installer: Open the downloaded installer. Check "Add Python to PATH" and select "Install Now."
    Verify Installation:
        Open Command Prompt and type python --version or python -V.

For macOS:

    Download: Use Homebrew by running brew install python in Terminal, or download from the Python website.
    Verify Installation:
        Type python3 --version in Terminal.

For Linux:

    Use Package Manager: For Ubuntu, run sudo apt update and sudo apt install python3 python3-pip.
    Verify Installation:
        Run python3 --version in Terminal.

Setting Up a Virtual Environment:

    Create a virtual environment:

    bash

    python -m venv myenv

    Activate the environment:
        Windows: myenv\Scripts\activate
        macOS/Linux: source myenv/bin/activate

Python Syntax and Semantics

Hello, World! Program:

python

print("Hello, World!")

Basic Syntax Elements:

    print(): A built-in function to output text to the console.
    "Hello, World!": A string enclosed in quotes, representing the text to print.

Data Types and Variables

Basic Data Types:

    Integer (int): Whole numbers, e.g., 5.
    Float (float): Decimal numbers, e.g., 5.0.
    String (str): Text, e.g., "Hello".
    Boolean (bool): True or False values, e.g., True.

Example Script:

python

# Variable definitions
age = 25              # Integer
height = 5.9         # Float
name = "Alice"       # String
is_student = True     # Boolean

print(f"Name: {name}, Age: {age}, Height: {height}, Is Student: {is_student}")

Control Structures

Conditional Statements:

python

age = 18
if age >= 18:
    print("Adult")
else:
    print("Minor")

Loops:
For Loop Example:

python

for i in range(5):
    print(i)

Functions in Python

What are Functions?
Functions are reusable blocks of code that perform a specific task, promoting code modularity and reuse.

Function Example:

python

def add(a, b):
    return a + b

# Calling the function
result = add(3, 5)
print(result)  # Output: 8

Lists and Dictionaries

Differences:

    Lists: Ordered, mutable collections that can contain duplicates. Defined with square brackets.
    Dictionaries: Unordered, mutable collections of key-value pairs. Defined with curly braces.

Example Script:

python

# List
numbers = [1, 2, 3, 4, 5]
print("List:", numbers)

# Dictionary
person = {"name": "Alice", "age": 25}
print("Dictionary:", person)

# Operations
numbers.append(6)
print("Updated List:", numbers)
print("Name from Dictionary:", person["name"])

Exception Handling

What is Exception Handling?
Exception handling allows you to manage errors gracefully, preventing program crashes and providing meaningful feedback.

Example:

python

try:
    result = 10 / 0
except ZeroDivisionError:
    print("You cannot divide by zero.")
finally:
    print("Execution completed.")

Modules and Packages

Concepts:

    Modules: Files containing Python code (functions, variables).
    Packages: Collections of related modules.

Importing a Module:

python

import math

print(math.sqrt(16))  # Output: 4.0

File I/O

Reading from a File:

python

with open('example.txt', 'r') as file:
    content = file.read()
    print(content)

Writing to a File:

python

lines = ["Hello, World!\n", "Python is great!\n"]

with open('output.txt', 'w') as file:
    file.writelines(lines)
